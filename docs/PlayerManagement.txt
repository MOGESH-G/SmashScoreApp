// screens/PlayerManagementScreen.js
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  TextInput,
  Alert,
  Modal,
} from 'react-native';
import { useApp } from '../context/AppContext';
import { generateUUID } from '../utils/helpers';
import BannerAdComponent from '../components/common/BannerAdComponent';

const PlayerManagementScreen = () => {
  const { players, addPlayer, updatePlayer } = useApp();
  const [modalVisible, setModalVisible] = useState(false);
  const [editingPlayer, setEditingPlayer] = useState(null);
  const [playerName, setPlayerName] = useState('');
  const [playerTag, setPlayerTag] = useState('');

  const handleSavePlayer = async () => {
    if (!playerName.trim()) {
      Alert.alert('Error', 'Player name is required');
      return;
    }

    const playerData = {
      id: editingPlayer?.id || generateUUID(),
      name: playerName.trim(),
      tag: playerTag.trim(),
      wins: editingPlayer?.wins || 0,
      losses: editingPlayer?.losses || 0,
      tournaments: editingPlayer?.tournaments || [],
      createdAt: editingPlayer?.createdAt || new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    if (editingPlayer) {
      await updatePlayer(playerData);
    } else {
      await addPlayer(playerData);
    }

    setModalVisible(false);
    setPlayerName('');
    setPlayerTag('');
    setEditingPlayer(null);
  };

  const handleEditPlayer = (player) => {
    setEditingPlayer(player);
    setPlayerName(player.name);
    setPlayerTag(player.tag || '');
    setModalVisible(true);
  };

  const renderPlayerItem = ({ item }) => (
    <TouchableOpacity
      style={styles.playerCard}
      onPress={() => handleEditPlayer(item)}
    >
      <View style={styles.playerInfo}>
        <Text style={styles.playerName}>{item.name}</Text>
        {item.tag && <Text style={styles.playerTag}>#{item.tag}</Text>}
      </View>
      <View style={styles.playerStats}>
        <Text style={styles.statText}>W: {item.wins}</Text>
        <Text style={styles.statText}>L: {item.losses}</Text>
        <Text style={styles.winRate}>
          {item.wins + item.losses > 0 
            ? `${Math.round((item.wins / (item.wins + item.losses)) * 100)}%`
            : '0%'
          }
        </Text>
      </View>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <BannerAdComponent />

      <View style={styles.header}>
        <Text style={styles.title}>Players ({players.length})</Text>
        <TouchableOpacity
          style={styles.addButton}
          onPress={() => setModalVisible(true)}
        >
          <Text style={styles.addButtonText}>+ Add Player</Text>
        </TouchableOpacity>
      </View>

      <FlatList
        data={players}
        renderItem={renderPlayerItem}
        keyExtractor={(item) => item.id}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.listContainer}
      />

      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>
              {editingPlayer ? 'Edit Player' : 'Add New Player'}
            </Text>

            <TextInput
              style={styles.input}
              placeholder="Player Name"
              value={playerName}
              onChangeText={setPlayerName}
              maxLength={50}
            />

            <TextInput
              style={styles.input}
              placeholder="Gamer Tag (optional)"
              value={playerTag}
              onChangeText={setPlayerTag}
              maxLength={20}
            />

            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={[styles.modalButton, styles.cancelButton]}
                onPress={() => {
                  setModalVisible(false);
                  setPlayerName('');
                  setPlayerTag('');
                  setEditingPlayer(null);
                }}
              >
                <Text style={styles.cancelButtonText}>Cancel</Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={[styles.modalButton, styles.saveButton]}
                onPress={handleSavePlayer}
              >
                <Text style={styles.saveButtonText}>Save</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 15,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
  },
  addButton: {
    backgroundColor: '#4CAF50',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 20,
  },
  addButtonText: {
    color: 'white',
    fontWeight: 'bold',
  },
  listContainer: {
    paddingHorizontal: 20,
  },
  playerCard: {
    backgroundColor: 'white',
    padding: 15,
    marginBottom: 10,
    borderRadius: 10,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  playerInfo: {
    flex: 1,
  },
  playerName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  playerTag: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  playerStats: {
    alignItems: 'flex-end',
  },
  statText: {
    fontSize: 14,
    color: '#666',
  },
  winRate: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1976D2',
    marginTop: 2,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 15,
    width: '90%',
    maxWidth: 400,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 10,
    padding: 15,
    marginBottom: 15,
    fontSize: 16,
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 10,
  },
  modalButton: {
    flex: 1,
    padding: 15,
    borderRadius: 10,
    marginHorizontal: 5,
    alignItems: 'center',
  },
  cancelButton: {
    backgroundColor: '#f0f0f0',
  },
  saveButton: {
    backgroundColor: '#1976D2',
  },
  cancelButtonText: {
    color: '#666',
    fontWeight: 'bold',
  },
  saveButtonText: {
    color: 'white',
    fontWeight: 'bold',
  },
});

export default PlayerManagementScreen;